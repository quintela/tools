version: '3.8'

services:
  grafana:
    image: grafana/grafana:${GRAFANA_VERSION}
    platform: linux/x86_64
    restart: always
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - db-data:/var/lib/grafana
      - .logs/grafana:/var/log/grafana
      - ./config/grafana/custom.ini:/etc/grafana/grafana.ini
      - ./config/grafana/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
      - ./config/grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./config/grafana/alerts.yml:/etc/grafana/provisioning/alerting/alerts.yaml
    env_file: grafana.env
    depends_on:
      - tempo
      - loki
      - prometheus
      - promtail
      - node_exporter
      - cadvisor
    networks:
      - grafana-network
    healthcheck:
      interval: 5s
      retries: 10
      test: wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1
    deploy:
      resources:
        limits:
          memory: "3221225472"   # 3.5 GiB in bytes
          cpus: '0.15'
        reservations:
          memory: "157286400"   # 150 MiB in bytes
          cpus: '0.15'

  loki:
    image: grafana/loki:${LOKI_VERSION}
    platform: linux/x86_64
    restart: always
    command: -config.file=/mnt/config/loki-config.yaml
    ports:
      - "3100:3100"
    environment:
      - GOMEMLIMIT=1900MiB
    volumes:
      - ./config/loki:/mnt/config
      - loki-data:/loki
    depends_on:
      - tempo
    networks:
      - grafana-network
    healthcheck:
      interval: 5s
      retries: 10
      test: wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1
    deploy:
      resources:
        limits:
          memory: "2147483648"   # 2 GiB in bytes
          cpus: '4'
        reservations:
          cpus: '1'
          memory: "262144000"   # 250 MiB in bytes

  tempo:
    image: grafana/tempo:${TEMPO_VERSION}
    platform: linux/x86_64
    restart: always
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/tempo/tempo.yaml:/etc/tempo.yaml
      - tempo-data:/var/lib/tempo
    ports:
      - "127.0.0.1:14268:14268" # jaeger ingest
      - "127.0.0.1:3200:3200"   # tempo
      - "127.0.0.1:9095:9095"   # tempo grpc
      - "127.0.0.1:40317:4317"   # otlp grpc
      - "127.0.0.1:40318:4318"   # otlp http
      - "127.0.0.1:9411:9411"   # zipkin
    networks:
      - grafana-network
    healthcheck:
      interval: 5s
      retries: 10
      test: wget --no-verbose --tries=1 --spider http://localhost:3200/status || exit 1
    deploy:
      resources:
        limits:
          memory: "3.5G"
          cpus: '1'
        reservations:
          cpus: '0.2'
          memory: "2G"

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION}
    platform: linux/x86_64
    restart: always
    command:
      - --config.file=/etc/prometheus/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --web.external-url=/prometheus/
      - --enable-feature=exemplar-storage
      - --storage.tsdb.retention.time=14d
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - grafana-network
    healthcheck:
      interval: 5s
      retries: 10
      test: wget --no-verbose --tries=1 --spider http://localhost:9090/prometheus/status || exit 1
    deploy:
      resources:
        limits:
          memory: "1073741824"   # 1 GiB in bytes
          cpus: '0.5'
        reservations:
          cpus: '0.5'
          memory: "419430400"   # 400 MiB in bytes

  promtail:
    image: grafana/promtail:${PROMTAIL_VERSION}
    platform: linux/x86_64
    restart: always
    command:
      - -config.expand-env=true
      - -config.file=/etc/promtail/config.yml
    volumes:
      - promtail-data:/var/lib/promtail
      - ./config/promtail/:/etc/promtail/
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - tempo
      - loki
    networks:
      - grafana-network
    healthcheck:
     test: ["CMD-SHELL", "echo running || exit 1"]
     interval: 10s
     timeout: 5s
     retries: 3

  node_exporter:
    image: prom/node-exporter:${NODE_EXPORTER_VERSION}
    platform: linux/x86_64
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "127.0.0.1:9010:9100"
    networks:
      - grafana-network
    healthcheck:
      interval: 5s
      retries: 10
      test: wget --no-verbose --tries=1 --spider http://localhost:9100/ || exit 1

  cadvisor:
    image: 'gcr.io/cadvisor/cadvisor:${CADVISOR_VERSION}'
    platform: linux/x86_64
    restart: always
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "127.0.0.1:9020:8080"
    networks:
      - grafana-network
    healthcheck:
      interval: 5s
      retries: 10
      test: wget --no-verbose --tries=1 --spider http://localhost:8080/healthz || exit 1

  otel:
    image: otel/opentelemetry-collector:${OTEL_VERSION}
    platform: linux/x86_64
    restart: always
    command: [ "--config=/etc/otel.yaml" ]
    volumes:
      - ./config/otel/otel.yaml:/etc/otel.yaml
    ports:
      - "4317:4317"   # otlp grpc
      - "4318:4318"   # otlp http
    depends_on:
      tempo:
        condition: service_healthy
    networks:
      - grafana-network

  agent:
    env_file:
      - ./agent.env
    image: 'grafana/agent:${AGENT_VERSION}'
    networks:
      - grafana-network
    volumes:
      - ./config/agent/agent.yaml:/etc/agent-config/agent.yaml
      - .logs/agent-logs:/var/log/agent
      - agent-data:/var/lib/agent
    entrypoint:
      - /bin/grafana-agent
      - -config.file=/etc/agent-config/agent.yaml
      - -config.expand-env
      - -config.enable-read-api
      - -enable-features=integrations-next
    ports:
      - "12345:12345" # AGENT_PORT
      - "8027:8027" # AGENT_PORT_APP_RECEIVER
      - "4417:4317" # TEMPO_PORT_OTLP_RECEIVER
    depends_on:
      - 'prometheus'
      - 'grafana'
      - 'loki'
      - 'tempo'
    healthcheck:
      interval: 5s
      retries: 10
      test: "bash -c 'printf \"/-/ready HTTP/1.1\nHost: localhost\nConnection: close\n\n\" > /dev/tcp/127.0.0.1/12345; exit $?;'"


volumes:
  db-data:
  tempo-data:
  loki-data:
  promtail-data:
  prometheus-data:
  agent-data:

networks:
  grafana-network:
